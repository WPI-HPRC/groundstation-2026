// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: PayloadTelemetryPacket.proto

/* eslint-disable */

export const protobufPackage = "HPRC";

export interface PayloadTelemetryPacket {
  /**
   * State Integer
   * 0 - PreLaunch
   * 1 - Test
   */
  state: number;
  /** Raw Sensor Readings */
  accelX: number;
  accelY: number;
  accelZ: number;
  gyroX: number;
  gyroY: number;
  gyroZ: number;
  rawMagX: number;
  rawMagY: number;
  rawMagZ: number;
  pressure: number;
  temperature: number;
  /** Calculated Values */
  altitude: number;
  initialAltitude: number;
  magX: number;
  magY: number;
  magZ: number;
  /** EKF Results */
  w: number;
  i: number;
  j: number;
  k: number;
  /** Position State ECEF */
  posX: number;
  posY: number;
  posZ: number;
  /** Velocity State ECEF */
  velX: number;
  velY: number;
  velZ: number;
  /** GPS Inputs */
  gpsLat: number;
  gpsLong: number;
  gpsAltMSL: number;
  gpsAltAGL: number;
  epochTime: number;
  satellites: number;
  gpsLock: boolean;
  loopCount: number;
  timestamp: number;
  /** CV */
  cx: number;
  cy: number;
  /** Target Point GPS Estimations */
  targetGpsLat: number;
  targetGpsLong: number;
  /** Servo Controls Values */
  desiredServoPos1: number;
  actualServoPos1: number;
  desiredServoPos2: number;
  actualServoPos2: number;
  desiredServoPos3: number;
  actualServoPos3: number;
  desiredServoPos4: number;
  actualServoPos4: number;
  /** Calculated Trajectory Constants */
  trajA: number;
  trajB: number;
  trajC: number;
  trajD: number;
}

function createBasePayloadTelemetryPacket(): PayloadTelemetryPacket {
  return {
    state: 0,
    accelX: 0,
    accelY: 0,
    accelZ: 0,
    gyroX: 0,
    gyroY: 0,
    gyroZ: 0,
    rawMagX: 0,
    rawMagY: 0,
    rawMagZ: 0,
    pressure: 0,
    temperature: 0,
    altitude: 0,
    initialAltitude: 0,
    magX: 0,
    magY: 0,
    magZ: 0,
    w: 0,
    i: 0,
    j: 0,
    k: 0,
    posX: 0,
    posY: 0,
    posZ: 0,
    velX: 0,
    velY: 0,
    velZ: 0,
    gpsLat: 0,
    gpsLong: 0,
    gpsAltMSL: 0,
    gpsAltAGL: 0,
    epochTime: 0,
    satellites: 0,
    gpsLock: false,
    loopCount: 0,
    timestamp: 0,
    cx: 0,
    cy: 0,
    targetGpsLat: 0,
    targetGpsLong: 0,
    desiredServoPos1: 0,
    actualServoPos1: 0,
    desiredServoPos2: 0,
    actualServoPos2: 0,
    desiredServoPos3: 0,
    actualServoPos3: 0,
    desiredServoPos4: 0,
    actualServoPos4: 0,
    trajA: 0,
    trajB: 0,
    trajC: 0,
    trajD: 0,
  };
}

export const PayloadTelemetryPacket: MessageFns<PayloadTelemetryPacket> = {
  fromJSON(object: any): PayloadTelemetryPacket {
    return {
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      accelX: isSet(object.accelX) ? globalThis.Number(object.accelX) : 0,
      accelY: isSet(object.accelY) ? globalThis.Number(object.accelY) : 0,
      accelZ: isSet(object.accelZ) ? globalThis.Number(object.accelZ) : 0,
      gyroX: isSet(object.gyroX) ? globalThis.Number(object.gyroX) : 0,
      gyroY: isSet(object.gyroY) ? globalThis.Number(object.gyroY) : 0,
      gyroZ: isSet(object.gyroZ) ? globalThis.Number(object.gyroZ) : 0,
      rawMagX: isSet(object.rawMagX) ? globalThis.Number(object.rawMagX) : 0,
      rawMagY: isSet(object.rawMagY) ? globalThis.Number(object.rawMagY) : 0,
      rawMagZ: isSet(object.rawMagZ) ? globalThis.Number(object.rawMagZ) : 0,
      pressure: isSet(object.pressure) ? globalThis.Number(object.pressure) : 0,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
      initialAltitude: isSet(object.initialAltitude) ? globalThis.Number(object.initialAltitude) : 0,
      magX: isSet(object.magX) ? globalThis.Number(object.magX) : 0,
      magY: isSet(object.magY) ? globalThis.Number(object.magY) : 0,
      magZ: isSet(object.magZ) ? globalThis.Number(object.magZ) : 0,
      w: isSet(object.w) ? globalThis.Number(object.w) : 0,
      i: isSet(object.i) ? globalThis.Number(object.i) : 0,
      j: isSet(object.j) ? globalThis.Number(object.j) : 0,
      k: isSet(object.k) ? globalThis.Number(object.k) : 0,
      posX: isSet(object.posX) ? globalThis.Number(object.posX) : 0,
      posY: isSet(object.posY) ? globalThis.Number(object.posY) : 0,
      posZ: isSet(object.posZ) ? globalThis.Number(object.posZ) : 0,
      velX: isSet(object.velX) ? globalThis.Number(object.velX) : 0,
      velY: isSet(object.velY) ? globalThis.Number(object.velY) : 0,
      velZ: isSet(object.velZ) ? globalThis.Number(object.velZ) : 0,
      gpsLat: isSet(object.gpsLat) ? globalThis.Number(object.gpsLat) : 0,
      gpsLong: isSet(object.gpsLong) ? globalThis.Number(object.gpsLong) : 0,
      gpsAltMSL: isSet(object.gpsAltMSL) ? globalThis.Number(object.gpsAltMSL) : 0,
      gpsAltAGL: isSet(object.gpsAltAGL) ? globalThis.Number(object.gpsAltAGL) : 0,
      epochTime: isSet(object.epochTime) ? globalThis.Number(object.epochTime) : 0,
      satellites: isSet(object.satellites) ? globalThis.Number(object.satellites) : 0,
      gpsLock: isSet(object.gpsLock) ? globalThis.Boolean(object.gpsLock) : false,
      loopCount: isSet(object.loopCount) ? globalThis.Number(object.loopCount) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      cx: isSet(object.cx) ? globalThis.Number(object.cx) : 0,
      cy: isSet(object.cy) ? globalThis.Number(object.cy) : 0,
      targetGpsLat: isSet(object.targetGpsLat) ? globalThis.Number(object.targetGpsLat) : 0,
      targetGpsLong: isSet(object.targetGpsLong) ? globalThis.Number(object.targetGpsLong) : 0,
      desiredServoPos1: isSet(object.desiredServoPos1) ? globalThis.Number(object.desiredServoPos1) : 0,
      actualServoPos1: isSet(object.actualServoPos1) ? globalThis.Number(object.actualServoPos1) : 0,
      desiredServoPos2: isSet(object.desiredServoPos2) ? globalThis.Number(object.desiredServoPos2) : 0,
      actualServoPos2: isSet(object.actualServoPos2) ? globalThis.Number(object.actualServoPos2) : 0,
      desiredServoPos3: isSet(object.desiredServoPos3) ? globalThis.Number(object.desiredServoPos3) : 0,
      actualServoPos3: isSet(object.actualServoPos3) ? globalThis.Number(object.actualServoPos3) : 0,
      desiredServoPos4: isSet(object.desiredServoPos4) ? globalThis.Number(object.desiredServoPos4) : 0,
      actualServoPos4: isSet(object.actualServoPos4) ? globalThis.Number(object.actualServoPos4) : 0,
      trajA: isSet(object.trajA) ? globalThis.Number(object.trajA) : 0,
      trajB: isSet(object.trajB) ? globalThis.Number(object.trajB) : 0,
      trajC: isSet(object.trajC) ? globalThis.Number(object.trajC) : 0,
      trajD: isSet(object.trajD) ? globalThis.Number(object.trajD) : 0,
    };
  },

  toJSON(message: PayloadTelemetryPacket): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.accelX !== 0) {
      obj.accelX = message.accelX;
    }
    if (message.accelY !== 0) {
      obj.accelY = message.accelY;
    }
    if (message.accelZ !== 0) {
      obj.accelZ = message.accelZ;
    }
    if (message.gyroX !== 0) {
      obj.gyroX = message.gyroX;
    }
    if (message.gyroY !== 0) {
      obj.gyroY = message.gyroY;
    }
    if (message.gyroZ !== 0) {
      obj.gyroZ = message.gyroZ;
    }
    if (message.rawMagX !== 0) {
      obj.rawMagX = message.rawMagX;
    }
    if (message.rawMagY !== 0) {
      obj.rawMagY = message.rawMagY;
    }
    if (message.rawMagZ !== 0) {
      obj.rawMagZ = message.rawMagZ;
    }
    if (message.pressure !== 0) {
      obj.pressure = message.pressure;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    if (message.initialAltitude !== 0) {
      obj.initialAltitude = message.initialAltitude;
    }
    if (message.magX !== 0) {
      obj.magX = message.magX;
    }
    if (message.magY !== 0) {
      obj.magY = message.magY;
    }
    if (message.magZ !== 0) {
      obj.magZ = message.magZ;
    }
    if (message.w !== 0) {
      obj.w = message.w;
    }
    if (message.i !== 0) {
      obj.i = message.i;
    }
    if (message.j !== 0) {
      obj.j = message.j;
    }
    if (message.k !== 0) {
      obj.k = message.k;
    }
    if (message.posX !== 0) {
      obj.posX = message.posX;
    }
    if (message.posY !== 0) {
      obj.posY = message.posY;
    }
    if (message.posZ !== 0) {
      obj.posZ = message.posZ;
    }
    if (message.velX !== 0) {
      obj.velX = message.velX;
    }
    if (message.velY !== 0) {
      obj.velY = message.velY;
    }
    if (message.velZ !== 0) {
      obj.velZ = message.velZ;
    }
    if (message.gpsLat !== 0) {
      obj.gpsLat = message.gpsLat;
    }
    if (message.gpsLong !== 0) {
      obj.gpsLong = message.gpsLong;
    }
    if (message.gpsAltMSL !== 0) {
      obj.gpsAltMSL = message.gpsAltMSL;
    }
    if (message.gpsAltAGL !== 0) {
      obj.gpsAltAGL = message.gpsAltAGL;
    }
    if (message.epochTime !== 0) {
      obj.epochTime = Math.round(message.epochTime);
    }
    if (message.satellites !== 0) {
      obj.satellites = Math.round(message.satellites);
    }
    if (message.gpsLock !== false) {
      obj.gpsLock = message.gpsLock;
    }
    if (message.loopCount !== 0) {
      obj.loopCount = Math.round(message.loopCount);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.cx !== 0) {
      obj.cx = Math.round(message.cx);
    }
    if (message.cy !== 0) {
      obj.cy = Math.round(message.cy);
    }
    if (message.targetGpsLat !== 0) {
      obj.targetGpsLat = message.targetGpsLat;
    }
    if (message.targetGpsLong !== 0) {
      obj.targetGpsLong = message.targetGpsLong;
    }
    if (message.desiredServoPos1 !== 0) {
      obj.desiredServoPos1 = Math.round(message.desiredServoPos1);
    }
    if (message.actualServoPos1 !== 0) {
      obj.actualServoPos1 = Math.round(message.actualServoPos1);
    }
    if (message.desiredServoPos2 !== 0) {
      obj.desiredServoPos2 = Math.round(message.desiredServoPos2);
    }
    if (message.actualServoPos2 !== 0) {
      obj.actualServoPos2 = Math.round(message.actualServoPos2);
    }
    if (message.desiredServoPos3 !== 0) {
      obj.desiredServoPos3 = Math.round(message.desiredServoPos3);
    }
    if (message.actualServoPos3 !== 0) {
      obj.actualServoPos3 = Math.round(message.actualServoPos3);
    }
    if (message.desiredServoPos4 !== 0) {
      obj.desiredServoPos4 = Math.round(message.desiredServoPos4);
    }
    if (message.actualServoPos4 !== 0) {
      obj.actualServoPos4 = Math.round(message.actualServoPos4);
    }
    if (message.trajA !== 0) {
      obj.trajA = message.trajA;
    }
    if (message.trajB !== 0) {
      obj.trajB = message.trajB;
    }
    if (message.trajC !== 0) {
      obj.trajC = message.trajC;
    }
    if (message.trajD !== 0) {
      obj.trajD = message.trajD;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayloadTelemetryPacket>, I>>(base?: I): PayloadTelemetryPacket {
    return PayloadTelemetryPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayloadTelemetryPacket>, I>>(object: I): PayloadTelemetryPacket {
    const message = createBasePayloadTelemetryPacket();
    message.state = object.state ?? 0;
    message.accelX = object.accelX ?? 0;
    message.accelY = object.accelY ?? 0;
    message.accelZ = object.accelZ ?? 0;
    message.gyroX = object.gyroX ?? 0;
    message.gyroY = object.gyroY ?? 0;
    message.gyroZ = object.gyroZ ?? 0;
    message.rawMagX = object.rawMagX ?? 0;
    message.rawMagY = object.rawMagY ?? 0;
    message.rawMagZ = object.rawMagZ ?? 0;
    message.pressure = object.pressure ?? 0;
    message.temperature = object.temperature ?? 0;
    message.altitude = object.altitude ?? 0;
    message.initialAltitude = object.initialAltitude ?? 0;
    message.magX = object.magX ?? 0;
    message.magY = object.magY ?? 0;
    message.magZ = object.magZ ?? 0;
    message.w = object.w ?? 0;
    message.i = object.i ?? 0;
    message.j = object.j ?? 0;
    message.k = object.k ?? 0;
    message.posX = object.posX ?? 0;
    message.posY = object.posY ?? 0;
    message.posZ = object.posZ ?? 0;
    message.velX = object.velX ?? 0;
    message.velY = object.velY ?? 0;
    message.velZ = object.velZ ?? 0;
    message.gpsLat = object.gpsLat ?? 0;
    message.gpsLong = object.gpsLong ?? 0;
    message.gpsAltMSL = object.gpsAltMSL ?? 0;
    message.gpsAltAGL = object.gpsAltAGL ?? 0;
    message.epochTime = object.epochTime ?? 0;
    message.satellites = object.satellites ?? 0;
    message.gpsLock = object.gpsLock ?? false;
    message.loopCount = object.loopCount ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.cx = object.cx ?? 0;
    message.cy = object.cy ?? 0;
    message.targetGpsLat = object.targetGpsLat ?? 0;
    message.targetGpsLong = object.targetGpsLong ?? 0;
    message.desiredServoPos1 = object.desiredServoPos1 ?? 0;
    message.actualServoPos1 = object.actualServoPos1 ?? 0;
    message.desiredServoPos2 = object.desiredServoPos2 ?? 0;
    message.actualServoPos2 = object.actualServoPos2 ?? 0;
    message.desiredServoPos3 = object.desiredServoPos3 ?? 0;
    message.actualServoPos3 = object.actualServoPos3 ?? 0;
    message.desiredServoPos4 = object.desiredServoPos4 ?? 0;
    message.actualServoPos4 = object.actualServoPos4 ?? 0;
    message.trajA = object.trajA ?? 0;
    message.trajB = object.trajB ?? 0;
    message.trajC = object.trajC ?? 0;
    message.trajD = object.trajD ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

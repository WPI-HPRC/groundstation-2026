// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: CommandResponse.proto

/* eslint-disable */

export const protobufPackage = "HPRC";

export interface CommandResponse {
  Message?:
    | { $case: "setFlightMode"; setFlightMode: CommandResponse_SetFlightMode }
    | { $case: "setVideoActive"; setVideoActive: CommandResponse_SetVideoActive }
    | { $case: "clearSD"; clearSD: CommandResponse_ClearSD }
    | { $case: "readSDDirectory"; readSDDirectory: CommandResponse_ReadSDDirectory }
    | { $case: "readSDFile"; readSDFile: CommandResponse_ReadSDFile }
    | undefined;
}

export interface CommandResponse_SetFlightMode {
  success: boolean;
}

export interface CommandResponse_SetVideoActive {
  success: boolean;
}

export interface CommandResponse_ClearSD {
  success: boolean;
}

export interface CommandResponse_ReadSDDirectory {
  filename: string[];
}

export interface CommandResponse_ReadSDFile {
  fileContents: string;
}

function createBaseCommandResponse(): CommandResponse {
  return { Message: undefined };
}

export const CommandResponse: MessageFns<CommandResponse> = {
  fromJSON(object: any): CommandResponse {
    return {
      Message: isSet(object.setFlightMode)
        ? { $case: "setFlightMode", setFlightMode: CommandResponse_SetFlightMode.fromJSON(object.setFlightMode) }
        : isSet(object.setVideoActive)
        ? { $case: "setVideoActive", setVideoActive: CommandResponse_SetVideoActive.fromJSON(object.setVideoActive) }
        : isSet(object.clearSD)
        ? { $case: "clearSD", clearSD: CommandResponse_ClearSD.fromJSON(object.clearSD) }
        : isSet(object.readSDDirectory)
        ? {
          $case: "readSDDirectory",
          readSDDirectory: CommandResponse_ReadSDDirectory.fromJSON(object.readSDDirectory),
        }
        : isSet(object.readSDFile)
        ? { $case: "readSDFile", readSDFile: CommandResponse_ReadSDFile.fromJSON(object.readSDFile) }
        : undefined,
    };
  },

  toJSON(message: CommandResponse): unknown {
    const obj: any = {};
    if (message.Message?.$case === "setFlightMode") {
      obj.setFlightMode = CommandResponse_SetFlightMode.toJSON(message.Message.setFlightMode);
    } else if (message.Message?.$case === "setVideoActive") {
      obj.setVideoActive = CommandResponse_SetVideoActive.toJSON(message.Message.setVideoActive);
    } else if (message.Message?.$case === "clearSD") {
      obj.clearSD = CommandResponse_ClearSD.toJSON(message.Message.clearSD);
    } else if (message.Message?.$case === "readSDDirectory") {
      obj.readSDDirectory = CommandResponse_ReadSDDirectory.toJSON(message.Message.readSDDirectory);
    } else if (message.Message?.$case === "readSDFile") {
      obj.readSDFile = CommandResponse_ReadSDFile.toJSON(message.Message.readSDFile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse>, I>>(base?: I): CommandResponse {
    return CommandResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse>, I>>(object: I): CommandResponse {
    const message = createBaseCommandResponse();
    switch (object.Message?.$case) {
      case "setFlightMode": {
        if (object.Message?.setFlightMode !== undefined && object.Message?.setFlightMode !== null) {
          message.Message = {
            $case: "setFlightMode",
            setFlightMode: CommandResponse_SetFlightMode.fromPartial(object.Message.setFlightMode),
          };
        }
        break;
      }
      case "setVideoActive": {
        if (object.Message?.setVideoActive !== undefined && object.Message?.setVideoActive !== null) {
          message.Message = {
            $case: "setVideoActive",
            setVideoActive: CommandResponse_SetVideoActive.fromPartial(object.Message.setVideoActive),
          };
        }
        break;
      }
      case "clearSD": {
        if (object.Message?.clearSD !== undefined && object.Message?.clearSD !== null) {
          message.Message = { $case: "clearSD", clearSD: CommandResponse_ClearSD.fromPartial(object.Message.clearSD) };
        }
        break;
      }
      case "readSDDirectory": {
        if (object.Message?.readSDDirectory !== undefined && object.Message?.readSDDirectory !== null) {
          message.Message = {
            $case: "readSDDirectory",
            readSDDirectory: CommandResponse_ReadSDDirectory.fromPartial(object.Message.readSDDirectory),
          };
        }
        break;
      }
      case "readSDFile": {
        if (object.Message?.readSDFile !== undefined && object.Message?.readSDFile !== null) {
          message.Message = {
            $case: "readSDFile",
            readSDFile: CommandResponse_ReadSDFile.fromPartial(object.Message.readSDFile),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseCommandResponse_SetFlightMode(): CommandResponse_SetFlightMode {
  return { success: false };
}

export const CommandResponse_SetFlightMode: MessageFns<CommandResponse_SetFlightMode> = {
  fromJSON(object: any): CommandResponse_SetFlightMode {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CommandResponse_SetFlightMode): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_SetFlightMode>, I>>(base?: I): CommandResponse_SetFlightMode {
    return CommandResponse_SetFlightMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_SetFlightMode>, I>>(
    object: I,
  ): CommandResponse_SetFlightMode {
    const message = createBaseCommandResponse_SetFlightMode();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCommandResponse_SetVideoActive(): CommandResponse_SetVideoActive {
  return { success: false };
}

export const CommandResponse_SetVideoActive: MessageFns<CommandResponse_SetVideoActive> = {
  fromJSON(object: any): CommandResponse_SetVideoActive {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CommandResponse_SetVideoActive): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_SetVideoActive>, I>>(base?: I): CommandResponse_SetVideoActive {
    return CommandResponse_SetVideoActive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_SetVideoActive>, I>>(
    object: I,
  ): CommandResponse_SetVideoActive {
    const message = createBaseCommandResponse_SetVideoActive();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCommandResponse_ClearSD(): CommandResponse_ClearSD {
  return { success: false };
}

export const CommandResponse_ClearSD: MessageFns<CommandResponse_ClearSD> = {
  fromJSON(object: any): CommandResponse_ClearSD {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CommandResponse_ClearSD): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_ClearSD>, I>>(base?: I): CommandResponse_ClearSD {
    return CommandResponse_ClearSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_ClearSD>, I>>(object: I): CommandResponse_ClearSD {
    const message = createBaseCommandResponse_ClearSD();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCommandResponse_ReadSDDirectory(): CommandResponse_ReadSDDirectory {
  return { filename: [] };
}

export const CommandResponse_ReadSDDirectory: MessageFns<CommandResponse_ReadSDDirectory> = {
  fromJSON(object: any): CommandResponse_ReadSDDirectory {
    return {
      filename: globalThis.Array.isArray(object?.filename)
        ? object.filename.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CommandResponse_ReadSDDirectory): unknown {
    const obj: any = {};
    if (message.filename?.length) {
      obj.filename = message.filename;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_ReadSDDirectory>, I>>(base?: I): CommandResponse_ReadSDDirectory {
    return CommandResponse_ReadSDDirectory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_ReadSDDirectory>, I>>(
    object: I,
  ): CommandResponse_ReadSDDirectory {
    const message = createBaseCommandResponse_ReadSDDirectory();
    message.filename = object.filename?.map((e) => e) || [];
    return message;
  },
};

function createBaseCommandResponse_ReadSDFile(): CommandResponse_ReadSDFile {
  return { fileContents: "" };
}

export const CommandResponse_ReadSDFile: MessageFns<CommandResponse_ReadSDFile> = {
  fromJSON(object: any): CommandResponse_ReadSDFile {
    return { fileContents: isSet(object.fileContents) ? globalThis.String(object.fileContents) : "" };
  },

  toJSON(message: CommandResponse_ReadSDFile): unknown {
    const obj: any = {};
    if (message.fileContents !== "") {
      obj.fileContents = message.fileContents;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandResponse_ReadSDFile>, I>>(base?: I): CommandResponse_ReadSDFile {
    return CommandResponse_ReadSDFile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandResponse_ReadSDFile>, I>>(object: I): CommandResponse_ReadSDFile {
    const message = createBaseCommandResponse_ReadSDFile();
    message.fileContents = object.fileContents ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: Telemetry.proto

/* eslint-disable */
import { PayloadTelemetryPacket } from "./PayloadTelemetryPacket";
import { RocketTelemetryPacket } from "./RocketTelemetryPacket";

export const protobufPackage = "HPRC";

export interface Telemetry {
  Message?: { $case: "payloadPacket"; payloadPacket: PayloadTelemetryPacket } | {
    $case: "rocketPacket";
    rocketPacket: RocketTelemetryPacket;
  } | undefined;
}

function createBaseTelemetry(): Telemetry {
  return { Message: undefined };
}

export const Telemetry: MessageFns<Telemetry> = {
  fromJSON(object: any): Telemetry {
    return {
      Message: isSet(object.payloadPacket)
        ? { $case: "payloadPacket", payloadPacket: PayloadTelemetryPacket.fromJSON(object.payloadPacket) }
        : isSet(object.rocketPacket)
        ? { $case: "rocketPacket", rocketPacket: RocketTelemetryPacket.fromJSON(object.rocketPacket) }
        : undefined,
    };
  },

  toJSON(message: Telemetry): unknown {
    const obj: any = {};
    if (message.Message?.$case === "payloadPacket") {
      obj.payloadPacket = PayloadTelemetryPacket.toJSON(message.Message.payloadPacket);
    } else if (message.Message?.$case === "rocketPacket") {
      obj.rocketPacket = RocketTelemetryPacket.toJSON(message.Message.rocketPacket);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Telemetry>, I>>(base?: I): Telemetry {
    return Telemetry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Telemetry>, I>>(object: I): Telemetry {
    const message = createBaseTelemetry();
    switch (object.Message?.$case) {
      case "payloadPacket": {
        if (object.Message?.payloadPacket !== undefined && object.Message?.payloadPacket !== null) {
          message.Message = {
            $case: "payloadPacket",
            payloadPacket: PayloadTelemetryPacket.fromPartial(object.Message.payloadPacket),
          };
        }
        break;
      }
      case "rocketPacket": {
        if (object.Message?.rocketPacket !== undefined && object.Message?.rocketPacket !== null) {
          message.Message = {
            $case: "rocketPacket",
            rocketPacket: RocketTelemetryPacket.fromPartial(object.Message.rocketPacket),
          };
        }
        break;
      }
    }
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

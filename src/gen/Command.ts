// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: Command.proto

/* eslint-disable */

export const protobufPackage = "HPRC";

export interface Command {
  Message?:
    | { $case: "actuateAirbrakes"; actuateAirbrakes: Command_ActuateAirbrakes }
    | { $case: "setFlightMode"; setFlightMode: Command_SetFlightMode }
    | { $case: "setVideoActive"; setVideoActive: Command_SetVideoActive }
    | { $case: "clearSD"; clearSD: Command_ClearSD }
    | { $case: "readSDDirectory"; readSDDirectory: Command_ReadSDDirectory }
    | { $case: "readSDFile"; readSDFile: Command_ReadSDFile }
    | { $case: "powerCycle"; powerCycle: Command_PowerCycle }
    | { $case: "setAcksEnabled"; setAcksEnabled: Command_SetAcksEnabled }
    | undefined;
}

export interface Command_ActuateAirbrakes {
  servoValue: number;
}

export interface Command_SetFlightMode {
  flightModeOn: boolean;
}

export interface Command_SetVideoActive {
  videoActive: boolean;
}

export interface Command_PowerCycle {
}

export interface Command_ClearSD {
}

export interface Command_ReadSDDirectory {
}

export interface Command_SetAcksEnabled {
  acksEnabled: boolean;
}

export interface Command_ReadSDFile {
  filename: string;
}

function createBaseCommand(): Command {
  return { Message: undefined };
}

export const Command: MessageFns<Command> = {
  fromJSON(object: any): Command {
    return {
      Message: isSet(object.actuateAirbrakes)
        ? { $case: "actuateAirbrakes", actuateAirbrakes: Command_ActuateAirbrakes.fromJSON(object.actuateAirbrakes) }
        : isSet(object.setFlightMode)
        ? { $case: "setFlightMode", setFlightMode: Command_SetFlightMode.fromJSON(object.setFlightMode) }
        : isSet(object.setVideoActive)
        ? { $case: "setVideoActive", setVideoActive: Command_SetVideoActive.fromJSON(object.setVideoActive) }
        : isSet(object.clearSD)
        ? { $case: "clearSD", clearSD: Command_ClearSD.fromJSON(object.clearSD) }
        : isSet(object.readSDDirectory)
        ? { $case: "readSDDirectory", readSDDirectory: Command_ReadSDDirectory.fromJSON(object.readSDDirectory) }
        : isSet(object.readSDFile)
        ? { $case: "readSDFile", readSDFile: Command_ReadSDFile.fromJSON(object.readSDFile) }
        : isSet(object.powerCycle)
        ? { $case: "powerCycle", powerCycle: Command_PowerCycle.fromJSON(object.powerCycle) }
        : isSet(object.setAcksEnabled)
        ? { $case: "setAcksEnabled", setAcksEnabled: Command_SetAcksEnabled.fromJSON(object.setAcksEnabled) }
        : undefined,
    };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.Message?.$case === "actuateAirbrakes") {
      obj.actuateAirbrakes = Command_ActuateAirbrakes.toJSON(message.Message.actuateAirbrakes);
    } else if (message.Message?.$case === "setFlightMode") {
      obj.setFlightMode = Command_SetFlightMode.toJSON(message.Message.setFlightMode);
    } else if (message.Message?.$case === "setVideoActive") {
      obj.setVideoActive = Command_SetVideoActive.toJSON(message.Message.setVideoActive);
    } else if (message.Message?.$case === "clearSD") {
      obj.clearSD = Command_ClearSD.toJSON(message.Message.clearSD);
    } else if (message.Message?.$case === "readSDDirectory") {
      obj.readSDDirectory = Command_ReadSDDirectory.toJSON(message.Message.readSDDirectory);
    } else if (message.Message?.$case === "readSDFile") {
      obj.readSDFile = Command_ReadSDFile.toJSON(message.Message.readSDFile);
    } else if (message.Message?.$case === "powerCycle") {
      obj.powerCycle = Command_PowerCycle.toJSON(message.Message.powerCycle);
    } else if (message.Message?.$case === "setAcksEnabled") {
      obj.setAcksEnabled = Command_SetAcksEnabled.toJSON(message.Message.setAcksEnabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command>, I>>(base?: I): Command {
    return Command.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command>, I>>(object: I): Command {
    const message = createBaseCommand();
    switch (object.Message?.$case) {
      case "actuateAirbrakes": {
        if (object.Message?.actuateAirbrakes !== undefined && object.Message?.actuateAirbrakes !== null) {
          message.Message = {
            $case: "actuateAirbrakes",
            actuateAirbrakes: Command_ActuateAirbrakes.fromPartial(object.Message.actuateAirbrakes),
          };
        }
        break;
      }
      case "setFlightMode": {
        if (object.Message?.setFlightMode !== undefined && object.Message?.setFlightMode !== null) {
          message.Message = {
            $case: "setFlightMode",
            setFlightMode: Command_SetFlightMode.fromPartial(object.Message.setFlightMode),
          };
        }
        break;
      }
      case "setVideoActive": {
        if (object.Message?.setVideoActive !== undefined && object.Message?.setVideoActive !== null) {
          message.Message = {
            $case: "setVideoActive",
            setVideoActive: Command_SetVideoActive.fromPartial(object.Message.setVideoActive),
          };
        }
        break;
      }
      case "clearSD": {
        if (object.Message?.clearSD !== undefined && object.Message?.clearSD !== null) {
          message.Message = { $case: "clearSD", clearSD: Command_ClearSD.fromPartial(object.Message.clearSD) };
        }
        break;
      }
      case "readSDDirectory": {
        if (object.Message?.readSDDirectory !== undefined && object.Message?.readSDDirectory !== null) {
          message.Message = {
            $case: "readSDDirectory",
            readSDDirectory: Command_ReadSDDirectory.fromPartial(object.Message.readSDDirectory),
          };
        }
        break;
      }
      case "readSDFile": {
        if (object.Message?.readSDFile !== undefined && object.Message?.readSDFile !== null) {
          message.Message = {
            $case: "readSDFile",
            readSDFile: Command_ReadSDFile.fromPartial(object.Message.readSDFile),
          };
        }
        break;
      }
      case "powerCycle": {
        if (object.Message?.powerCycle !== undefined && object.Message?.powerCycle !== null) {
          message.Message = {
            $case: "powerCycle",
            powerCycle: Command_PowerCycle.fromPartial(object.Message.powerCycle),
          };
        }
        break;
      }
      case "setAcksEnabled": {
        if (object.Message?.setAcksEnabled !== undefined && object.Message?.setAcksEnabled !== null) {
          message.Message = {
            $case: "setAcksEnabled",
            setAcksEnabled: Command_SetAcksEnabled.fromPartial(object.Message.setAcksEnabled),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseCommand_ActuateAirbrakes(): Command_ActuateAirbrakes {
  return { servoValue: 0 };
}

export const Command_ActuateAirbrakes: MessageFns<Command_ActuateAirbrakes> = {
  fromJSON(object: any): Command_ActuateAirbrakes {
    return { servoValue: isSet(object.servoValue) ? globalThis.Number(object.servoValue) : 0 };
  },

  toJSON(message: Command_ActuateAirbrakes): unknown {
    const obj: any = {};
    if (message.servoValue !== 0) {
      obj.servoValue = Math.round(message.servoValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_ActuateAirbrakes>, I>>(base?: I): Command_ActuateAirbrakes {
    return Command_ActuateAirbrakes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_ActuateAirbrakes>, I>>(object: I): Command_ActuateAirbrakes {
    const message = createBaseCommand_ActuateAirbrakes();
    message.servoValue = object.servoValue ?? 0;
    return message;
  },
};

function createBaseCommand_SetFlightMode(): Command_SetFlightMode {
  return { flightModeOn: false };
}

export const Command_SetFlightMode: MessageFns<Command_SetFlightMode> = {
  fromJSON(object: any): Command_SetFlightMode {
    return { flightModeOn: isSet(object.flightModeOn) ? globalThis.Boolean(object.flightModeOn) : false };
  },

  toJSON(message: Command_SetFlightMode): unknown {
    const obj: any = {};
    if (message.flightModeOn !== false) {
      obj.flightModeOn = message.flightModeOn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_SetFlightMode>, I>>(base?: I): Command_SetFlightMode {
    return Command_SetFlightMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_SetFlightMode>, I>>(object: I): Command_SetFlightMode {
    const message = createBaseCommand_SetFlightMode();
    message.flightModeOn = object.flightModeOn ?? false;
    return message;
  },
};

function createBaseCommand_SetVideoActive(): Command_SetVideoActive {
  return { videoActive: false };
}

export const Command_SetVideoActive: MessageFns<Command_SetVideoActive> = {
  fromJSON(object: any): Command_SetVideoActive {
    return { videoActive: isSet(object.videoActive) ? globalThis.Boolean(object.videoActive) : false };
  },

  toJSON(message: Command_SetVideoActive): unknown {
    const obj: any = {};
    if (message.videoActive !== false) {
      obj.videoActive = message.videoActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_SetVideoActive>, I>>(base?: I): Command_SetVideoActive {
    return Command_SetVideoActive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_SetVideoActive>, I>>(object: I): Command_SetVideoActive {
    const message = createBaseCommand_SetVideoActive();
    message.videoActive = object.videoActive ?? false;
    return message;
  },
};

function createBaseCommand_PowerCycle(): Command_PowerCycle {
  return {};
}

export const Command_PowerCycle: MessageFns<Command_PowerCycle> = {
  fromJSON(_: any): Command_PowerCycle {
    return {};
  },

  toJSON(_: Command_PowerCycle): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_PowerCycle>, I>>(base?: I): Command_PowerCycle {
    return Command_PowerCycle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_PowerCycle>, I>>(_: I): Command_PowerCycle {
    const message = createBaseCommand_PowerCycle();
    return message;
  },
};

function createBaseCommand_ClearSD(): Command_ClearSD {
  return {};
}

export const Command_ClearSD: MessageFns<Command_ClearSD> = {
  fromJSON(_: any): Command_ClearSD {
    return {};
  },

  toJSON(_: Command_ClearSD): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_ClearSD>, I>>(base?: I): Command_ClearSD {
    return Command_ClearSD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_ClearSD>, I>>(_: I): Command_ClearSD {
    const message = createBaseCommand_ClearSD();
    return message;
  },
};

function createBaseCommand_ReadSDDirectory(): Command_ReadSDDirectory {
  return {};
}

export const Command_ReadSDDirectory: MessageFns<Command_ReadSDDirectory> = {
  fromJSON(_: any): Command_ReadSDDirectory {
    return {};
  },

  toJSON(_: Command_ReadSDDirectory): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_ReadSDDirectory>, I>>(base?: I): Command_ReadSDDirectory {
    return Command_ReadSDDirectory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_ReadSDDirectory>, I>>(_: I): Command_ReadSDDirectory {
    const message = createBaseCommand_ReadSDDirectory();
    return message;
  },
};

function createBaseCommand_SetAcksEnabled(): Command_SetAcksEnabled {
  return { acksEnabled: false };
}

export const Command_SetAcksEnabled: MessageFns<Command_SetAcksEnabled> = {
  fromJSON(object: any): Command_SetAcksEnabled {
    return { acksEnabled: isSet(object.acksEnabled) ? globalThis.Boolean(object.acksEnabled) : false };
  },

  toJSON(message: Command_SetAcksEnabled): unknown {
    const obj: any = {};
    if (message.acksEnabled !== false) {
      obj.acksEnabled = message.acksEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_SetAcksEnabled>, I>>(base?: I): Command_SetAcksEnabled {
    return Command_SetAcksEnabled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_SetAcksEnabled>, I>>(object: I): Command_SetAcksEnabled {
    const message = createBaseCommand_SetAcksEnabled();
    message.acksEnabled = object.acksEnabled ?? false;
    return message;
  },
};

function createBaseCommand_ReadSDFile(): Command_ReadSDFile {
  return { filename: "" };
}

export const Command_ReadSDFile: MessageFns<Command_ReadSDFile> = {
  fromJSON(object: any): Command_ReadSDFile {
    return { filename: isSet(object.filename) ? globalThis.String(object.filename) : "" };
  },

  toJSON(message: Command_ReadSDFile): unknown {
    const obj: any = {};
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command_ReadSDFile>, I>>(base?: I): Command_ReadSDFile {
    return Command_ReadSDFile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command_ReadSDFile>, I>>(object: I): Command_ReadSDFile {
    const message = createBaseCommand_ReadSDFile();
    message.filename = object.filename ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

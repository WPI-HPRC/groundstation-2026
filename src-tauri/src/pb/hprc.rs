// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommandResponse {
    #[prost(oneof = "command_response::Message", tags = "1, 2, 3, 4, 5")]
    pub message: ::core::option::Option<command_response::Message>,
}
/// Nested message and enum types in `CommandResponse`.
pub mod command_response {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SetFlightMode {
        #[prost(bool, tag = "1")]
        pub success: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SetVideoActive {
        #[prost(bool, tag = "1")]
        pub success: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ClearSd {
        #[prost(bool, tag = "1")]
        pub success: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ReadSdDirectory {
        #[prost(string, repeated, tag = "1")]
        pub filename: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ReadSdFile {
        #[prost(string, tag = "1")]
        pub file_contents: ::prost::alloc::string::String,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        SetFlightMode(SetFlightMode),
        #[prost(message, tag = "2")]
        SetVideoActive(SetVideoActive),
        #[prost(message, tag = "3")]
        ClearSd(ClearSd),
        #[prost(message, tag = "4")]
        ReadSdDirectory(ReadSdDirectory),
        #[prost(message, tag = "5")]
        ReadSdFile(ReadSdFile),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RocketTelemetryPacket {
    /// State Integer
    /// 0 - PreLaunch
    /// 1 - Launch
    /// 2 - Coast
    /// 3 - DrogueDescent
    /// 4 - MainDescent
    /// 5 - Recovery
    /// 6 - Abort
    ///
    /// uint8_t
    #[prost(int32, tag = "1")]
    pub state: i32,
    /// Raw Sensor Readings
    #[prost(float, tag = "2")]
    pub accel_x: f32,
    #[prost(float, tag = "3")]
    pub accel_y: f32,
    #[prost(float, tag = "4")]
    pub accel_z: f32,
    #[prost(float, tag = "5")]
    pub gyro_x: f32,
    #[prost(float, tag = "6")]
    pub gyro_y: f32,
    #[prost(float, tag = "7")]
    pub gyro_z: f32,
    #[prost(float, tag = "8")]
    pub raw_mag_x: f32,
    #[prost(float, tag = "9")]
    pub raw_mag_y: f32,
    #[prost(float, tag = "10")]
    pub raw_mag_z: f32,
    #[prost(float, tag = "11")]
    pub pressure: f32,
    #[prost(float, tag = "12")]
    pub temperature: f32,
    #[prost(uint32, tag = "13")]
    pub servo_position: u32,
    /// Calculated Values
    #[prost(float, tag = "14")]
    pub altitude: f32,
    #[prost(float, tag = "40")]
    pub launch_altitude: f32,
    #[prost(float, tag = "15")]
    pub mag_x: f32,
    #[prost(float, tag = "16")]
    pub mag_y: f32,
    #[prost(float, tag = "17")]
    pub mag_z: f32,
    /// EKF Results
    ///
    /// Quaternion State
    #[prost(float, tag = "18")]
    pub w: f32,
    #[prost(float, tag = "19")]
    pub i: f32,
    #[prost(float, tag = "20")]
    pub j: f32,
    #[prost(float, tag = "21")]
    pub k: f32,
    /// Position State ECEF
    #[prost(float, tag = "22")]
    pub pos_x: f32,
    #[prost(float, tag = "23")]
    pub pos_y: f32,
    #[prost(float, tag = "24")]
    pub pos_z: f32,
    /// Velocity State ECEF
    #[prost(float, tag = "25")]
    pub vel_x: f32,
    #[prost(float, tag = "26")]
    pub vel_y: f32,
    #[prost(float, tag = "27")]
    pub vel_z: f32,
    /// GPS Inputs
    #[prost(float, tag = "28")]
    pub gps_lat: f32,
    #[prost(float, tag = "29")]
    pub gps_long: f32,
    #[prost(float, tag = "30")]
    pub gps_alt_msl: f32,
    #[prost(float, tag = "31")]
    pub gps_alt_agl: f32,
    #[prost(int32, tag = "32")]
    pub gps_velocity_n: i32,
    #[prost(int32, tag = "33")]
    pub gps_velocity_e: i32,
    #[prost(int32, tag = "34")]
    pub gps_velocity_d: i32,
    #[prost(uint32, tag = "35")]
    pub epoch_time: u32,
    /// uint8_t
    #[prost(uint32, tag = "36")]
    pub satellites: u32,
    #[prost(bool, tag = "37")]
    #[serde(with = "crate::serde_bool_0_1")]
    pub gps_lock: bool,
    #[prost(int32, tag = "47")]
    pub sd_file_no: i32,
    #[prost(uint32, tag = "38")]
    pub loop_count: u32,
    #[prost(uint32, tag = "39")]
    pub timestamp: u32,
    #[prost(float, tag = "41")]
    pub cov_qw: f32,
    #[prost(float, tag = "42")]
    pub cov_qx: f32,
    #[prost(float, tag = "43")]
    pub cov_qy: f32,
    #[prost(float, tag = "44")]
    pub cov_qz: f32,
    #[prost(bool, tag = "45")]
    #[serde(with = "crate::serde_bool_0_1")]
    pub drogue_deploy: bool,
    #[prost(bool, tag = "46")]
    #[serde(with = "crate::serde_bool_0_1")]
    pub main_deploy: bool,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PayloadTelemetryPacket {
    /// State Integer
    /// 0 - PreLaunch
    /// 1 - Test
    #[prost(uint32, tag = "1")]
    pub state: u32,
    /// Raw Sensor Readings
    #[prost(float, tag = "2")]
    pub accel_x: f32,
    #[prost(float, tag = "3")]
    pub accel_y: f32,
    #[prost(float, tag = "4")]
    pub accel_z: f32,
    #[prost(float, tag = "5")]
    pub gyro_x: f32,
    #[prost(float, tag = "6")]
    pub gyro_y: f32,
    #[prost(float, tag = "7")]
    pub gyro_z: f32,
    #[prost(float, tag = "8")]
    pub raw_mag_x: f32,
    #[prost(float, tag = "9")]
    pub raw_mag_y: f32,
    #[prost(float, tag = "10")]
    pub raw_mag_z: f32,
    #[prost(float, tag = "11")]
    pub pressure: f32,
    #[prost(float, tag = "12")]
    pub temperature: f32,
    /// Calculated Values
    #[prost(float, tag = "13")]
    pub altitude: f32,
    #[prost(float, tag = "55")]
    pub initial_altitude: f32,
    #[prost(float, tag = "14")]
    pub mag_x: f32,
    #[prost(float, tag = "15")]
    pub mag_y: f32,
    #[prost(float, tag = "16")]
    pub mag_z: f32,
    /// EKF Results
    ///
    /// Quaternion State
    #[prost(float, tag = "17")]
    pub w: f32,
    #[prost(float, tag = "18")]
    pub i: f32,
    #[prost(float, tag = "19")]
    pub j: f32,
    #[prost(float, tag = "20")]
    pub k: f32,
    /// Position State ECEF
    #[prost(float, tag = "21")]
    pub pos_x: f32,
    #[prost(float, tag = "22")]
    pub pos_y: f32,
    #[prost(float, tag = "23")]
    pub pos_z: f32,
    /// Velocity State ECEF
    #[prost(float, tag = "24")]
    pub vel_x: f32,
    #[prost(float, tag = "25")]
    pub vel_y: f32,
    #[prost(float, tag = "26")]
    pub vel_z: f32,
    /// GPS Inputs
    #[prost(float, tag = "27")]
    pub gps_lat: f32,
    #[prost(float, tag = "28")]
    pub gps_long: f32,
    #[prost(float, tag = "29")]
    pub gps_alt_msl: f32,
    #[prost(float, tag = "30")]
    pub gps_alt_agl: f32,
    #[prost(uint32, tag = "34")]
    pub epoch_time: u32,
    #[prost(uint32, tag = "35")]
    pub satellites: u32,
    #[prost(bool, tag = "36")]
    pub gps_lock: bool,
    #[prost(uint32, tag = "37")]
    pub loop_count: u32,
    #[prost(uint32, tag = "38")]
    pub timestamp: u32,
    /// CV
    ///
    /// Camera Centroids
    #[prost(uint32, tag = "39")]
    pub cx: u32,
    #[prost(uint32, tag = "40")]
    pub cy: u32,
    /// Target Point GPS Estimations
    #[prost(float, tag = "41")]
    pub target_gps_lat: f32,
    #[prost(float, tag = "42")]
    pub target_gps_long: f32,
    /// Servo Controls Values
    #[prost(uint32, tag = "43")]
    pub desired_servo_pos1: u32,
    #[prost(uint32, tag = "44")]
    pub actual_servo_pos1: u32,
    #[prost(uint32, tag = "45")]
    pub desired_servo_pos2: u32,
    #[prost(uint32, tag = "46")]
    pub actual_servo_pos2: u32,
    #[prost(uint32, tag = "47")]
    pub desired_servo_pos3: u32,
    #[prost(uint32, tag = "48")]
    pub actual_servo_pos3: u32,
    #[prost(uint32, tag = "49")]
    pub desired_servo_pos4: u32,
    #[prost(uint32, tag = "50")]
    pub actual_servo_pos4: u32,
    /// Calculated Trajectory Constants
    #[prost(float, tag = "51")]
    pub traj_a: f32,
    #[prost(float, tag = "52")]
    pub traj_b: f32,
    #[prost(float, tag = "53")]
    pub traj_c: f32,
    #[prost(float, tag = "54")]
    pub traj_d: f32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Telemetry {
    #[prost(oneof = "telemetry::Message", tags = "1, 2")]
    pub message: ::core::option::Option<telemetry::Message>,
}
/// Nested message and enum types in `Telemetry`.
pub mod telemetry {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        PayloadPacket(super::PayloadTelemetryPacket),
        #[prost(message, tag = "2")]
        RocketPacket(super::RocketTelemetryPacket),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Command {
    #[prost(oneof = "command::Message", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
    pub message: ::core::option::Option<command::Message>,
}
/// Nested message and enum types in `Command`.
pub mod command {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ActuateAirbrakes {
        #[prost(int32, tag = "1")]
        pub servo_value: i32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SetFlightMode {
        #[prost(bool, tag = "1")]
        pub flight_mode_on: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SetVideoActive {
        #[prost(bool, tag = "1")]
        pub video_active: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct PowerCycle {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ClearSd {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ReadSdDirectory {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SetAcksEnabled {
        #[prost(bool, tag = "1")]
        pub acks_enabled: bool,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "camelCase")]
    #[serde(default)]
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ReadSdFile {
        #[prost(string, tag = "1")]
        pub filename: ::prost::alloc::string::String,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        ActuateAirbrakes(ActuateAirbrakes),
        #[prost(message, tag = "2")]
        SetFlightMode(SetFlightMode),
        #[prost(message, tag = "3")]
        SetVideoActive(SetVideoActive),
        #[prost(message, tag = "4")]
        ClearSd(ClearSd),
        #[prost(message, tag = "5")]
        ReadSdDirectory(ReadSdDirectory),
        #[prost(message, tag = "6")]
        ReadSdFile(ReadSdFile),
        #[prost(message, tag = "7")]
        PowerCycle(PowerCycle),
        #[prost(message, tag = "8")]
        SetAcksEnabled(SetAcksEnabled),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BeginPacketChunks {
    #[prost(int32, tag = "1")]
    pub num_packets_to_be_sent: i32,
    #[prost(int32, tag = "2")]
    pub num_bytes_to_be_sent: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EndPacketChunks {
    #[prost(int32, tag = "1")]
    pub num_packets_sent: i32,
    #[prost(int32, tag = "2")]
    pub num_bytes_sent: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Packet {
    #[prost(oneof = "packet::Message", tags = "1, 2, 3, 4, 5")]
    pub message: ::core::option::Option<packet::Message>,
}
/// Nested message and enum types in `Packet`.
pub mod packet {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        Telemetry(super::Telemetry),
        #[prost(message, tag = "2")]
        Command(super::Command),
        #[prost(message, tag = "3")]
        CommandResponse(super::CommandResponse),
        #[prost(message, tag = "4")]
        BeginPacketChunks(super::BeginPacketChunks),
        #[prost(message, tag = "5")]
        EndPacketChunks(super::EndPacketChunks),
    }
}
